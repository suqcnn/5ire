import {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionPanel,\n  Button,\n} from '@fluentui/react-components';\nimport { ArrowForwardFilled } from '@fluentui/react-icons';\nimport useMarkdown from 'hooks/useMarkdown';\nimport useUI from 'hooks/useUI';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useAppearanceStore from 'stores/useAppearanceStore';\nimport useInspectorStore, { ITraceMessage } from 'stores/useInspectorStore';\nimport { IModelCallTrace } from 'types/inspector';\n\nexport default function ChatInspector({ chatId }: { chatId: string }) {\n  const { t } = useTranslation();\n  const { heightStyle } = useUI();\n  const theme = useAppearanceStore((state) => state.theme);\n  const { render } = useMarkdown();\n  const chatSidebar = useAppearanceStore((state) => state.chatSidebar);\n  const messages = useInspectorStore((state) => state.messages);\n  const { clearTrace } = useInspectorStore();\n  const trace = useMemo(() => messages[chatId] || [], [messages, chatId]);\n\n  const labelClasses: { [key: string]: string } = useMemo(() => {\n    if (theme === 'dark') {\n      return {\n        error: 'text-red-500 bg-red-900',\n        run: 'text-gray-500 bg-gray-900',\n        arguments: 'text-blue-400 bg-blue-900 ',\n        response: 'text-green-500 bg-green-900',\n      };\n    }\n    return {\n      error: 'text-red-500 bg-red-100',\n      run: 'text-gray-500 bg-gray-100',\n      arguments: 'text-blue-500 bg-blue-100',\n      response: 'text-green-500 bg-green-100',\n    };\n  }, [theme]);\n\n  // Separate traces by type\n  const toolTraces = trace.filter((item) => item.type === 'tool_call');\n  const modelTraces = trace.filter((item) => item.type === 'model_call');\n\n  return (\n    <aside\n      className={`z-20 pt-2.5 flex-shrink-0 min-w-[180px] ${\n        chatSidebar.show ? 'hidden sm:flex' : 'hidden'\n      }  inset-y-0 top-0 flex-col duration-300 md:relative pl-2`}\n    >\n      <div className=\"flex justify-between items-center text-gray-300 dark:text-stone-600 font-bold text-lg mb-2\">\n        <span> {t('Common.Inspector')}</span>\n        {trace.length > 0 && (\n          <Button\n            appearance=\"transparent\"\n            className=\"opacity-60\"\n            onClick={() => clearTrace(chatId)}\n            size=\"small\"\n          >\n            {t('Common.Action.Clear')}\n          </Button>\n        )}\n      </div>\n      <div\n        className=\" overflow-x-hidden overflow-y-auto break-word -ml-2.5 pb-14\"\n        style={{\n          height: heightStyle(),\n        }}\n      >\n        {trace.length > 0 ? (\n          <>\n            {toolTraces.length > 0 && (\n              <div className=\"mb-4\">\n                <h3 className=\"text-sm font-semibold mb-2 px-2\">Tool Calls</h3>\n                <Accordion multiple collapsible>\n                  {toolTraces.map((item: ITraceMessage, idx: number) => {\n                    return item.message === '' ? (\n                      <div className=\"pl-4 mt-2\" key={`${chatId}-${item.id}`}>\n                        <span className=\"inline-block pt-0 py-0.5 rounded truncate text-ellipsis overflow-hidden w-52 font-bold text-gray-400 dark:text-gray-400\">\n                          <ArrowForwardFilled />\n                          &nbsp;{item.label}\n                        </span>\n                      </div>\n                    ) : (\n                      <AccordionItem value={`tool-${idx}`} key={`${chatId}-${item.id}`}>\n                        <AccordionHeader size=\"small\">\n                          <span\n                            className={`px-1 inline-block pt-0 py-0.5 rounded ${labelClasses[item.label] || ''}`}\n                          >\n                            {item.label}\n                          </span>\n                        </AccordionHeader>\n                        <AccordionPanel>\n                          <div className=\"inspector-message\" style={{ marginLeft: 8 }}>\n                            <div\n                              dangerouslySetInnerHTML={{\n                                __html: render(`\\`\\`\\`json\\n${item.message}\\n\\`\\`\\``),\n                              }}\n                            />\n                          </div>\n                        </AccordionPanel>\n                      </AccordionItem>\n                    );\n                  })}\n                </Accordion>\n              </div>\n            )}\n            \n            {modelTraces.length > 0 && (\n              <div>\n                <h3 className=\"text-sm font-semibold mb-2 px-2\">Model Calls</h3>\n                <Accordion multiple collapsible>\n                  {modelTraces.map((item: IModelCallTrace, idx: number) => (\n                    <AccordionItem value={`model-${idx}`} key={`${chatId}-${item.id}`}>\n                      <AccordionHeader size=\"small\">\n                        <span className=\"px-1 inline-block pt-0 py-0.5 rounded bg-purple-100 dark:bg-purple-900 text-purple-500\">\n                          Model Call\n                        </span>\n                      </AccordionHeader>\n                      <AccordionPanel>\n                        <div className=\"inspector-message\" style={{ marginLeft: 8 }}>\n                          <h4 className=\"font-semibold mb-1\">Request:</h4>\n                          <div\n                            dangerouslySetInnerHTML={{\n                              __html: render(\n                                `\\`\\`\\`json\\n${JSON.stringify(\n                                  item.requestPayload,\n                                  null,\n                                  2,\n                                )}\\n\\`\\`\\``,\n                              ),\n                            }}\n                          />\n                          <h4 className=\"font-semibold mb-1 mt-2\">Response:</h4>\n                          <div\n                            dangerouslySetInnerHTML={{\n                              __html: render(\n                                `\\`\\`\\`json\\n${JSON.stringify(\n                                  item.responseBody,\n                                  null,\n                                  2,\n                                )}\\n\\`\\`\\``,\n                              ),\n                            }}\n                          />\n                          <div className=\"text-xs mt-2 text-gray-500\">\n                            Latency: {item.latency}ms\n                            {item.inputTokens && (\n                              <span>, Input Tokens: {item.inputTokens}</span>\n                            )}\n                            {item.outputTokens && (\n                              <span>, Output Tokens: {item.outputTokens}</span>\n                            )}\n                          </div>\n                        </div>\n                      </AccordionPanel>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n              </div>\n            )}\n          </>\n        ) : (\n          <div className=\"flex flex-col justify-center items-center px-2 opacity-70\">\n            <p className=\"tips text-xs\">{t('Common.InspectorHint')}</p>\n          </div>\n        )}\n      </div>\n    </aside>\n  );\n}